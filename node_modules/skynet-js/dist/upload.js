"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _client = require("./client.js");

var _utils = require("./utils.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultUploadOptions = _objectSpread(_objectSpread({}, (0, _utils.defaultOptions)("/skynet/skyfile")), {}, {
  portalFileFieldname: "file",
  portalDirectoryFileFieldname: "files[]",
  customFilename: ""
});

_client.SkynetClient.prototype.uploadFile = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(file) {
    var customOptions,
        response,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            customOptions = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            _context.next = 3;
            return this.uploadFileRequest(file, customOptions);

          case 3:
            response = _context.sent;
            return _context.abrupt("return", "".concat(_utils.uriSkynetPrefix).concat(response.skylink));

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

_client.SkynetClient.prototype.uploadFileRequest = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(file) {
    var customOptions,
        opts,
        formData,
        _yield$this$executeRe,
        data,
        _args2 = arguments;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            customOptions = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
            opts = _objectSpread(_objectSpread(_objectSpread({}, defaultUploadOptions), this.customOptions), customOptions);
            formData = new FormData();
            file = ensureFileObjectConsistency(file);

            if (opts.customFilename) {
              formData.append(opts.portalFileFieldname, file, opts.customFilename);
            } else {
              formData.append(opts.portalFileFieldname, file);
            }

            _context2.next = 7;
            return this.executeRequest(_objectSpread(_objectSpread({}, opts), {}, {
              method: "post",
              data: formData
            }));

          case 7:
            _yield$this$executeRe = _context2.sent;
            data = _yield$this$executeRe.data;
            return _context2.abrupt("return", data);

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Uploads a local directory to Skynet.
 * @param {Object} directory - File objects to upload, indexed by their path strings.
 * @param {string} filename - The name of the directory.
 * @param {Object} [customOptions={}] - Additional settings that can optionally be set.
 * @param {string} [config.APIKey] - Authentication password to use.
 * @param {string} [config.customUserAgent=""] - Custom user agent header to set.
 * @param {string} [customOptions.endpointPath="/skynet/skyfile"] - The relative URL path of the portal endpoint to contact.
 * @param {Function} [config.onUploadProgress] - Optional callback to track progress.
 * @param {string} [customOptions.portalDirectoryfilefieldname="files[]"] - The fieldName for directory files on the portal.
 * @returns {Object} data - The returned data.
 * @returns {string} data.skylink - The returned skylink.
 * @returns {string} data.merkleroot - The hash that is encoded into the skylink.
 * @returns {number} data.bitfield - The bitfield that gets encoded into the skylink.
 */


_client.SkynetClient.prototype.uploadDirectory = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(directory, filename) {
    var customOptions,
        response,
        _args3 = arguments;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            customOptions = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
            _context3.next = 3;
            return this.uploadDirectoryRequest(directory, filename, customOptions);

          case 3:
            response = _context3.sent;
            return _context3.abrupt("return", "".concat(_utils.uriSkynetPrefix).concat(response.skylink));

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function (_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();

_client.SkynetClient.prototype.uploadDirectoryRequest = /*#__PURE__*/function () {
  var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(directory, filename) {
    var customOptions,
        opts,
        formData,
        _yield$this$executeRe2,
        data,
        _args4 = arguments;

    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            customOptions = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
            opts = _objectSpread(_objectSpread(_objectSpread({}, defaultUploadOptions), this.customOptions), customOptions);
            formData = new FormData();
            Object.entries(directory).forEach(function (_ref5) {
              var _ref6 = (0, _slicedToArray2["default"])(_ref5, 2),
                  path = _ref6[0],
                  file = _ref6[1];

              file = ensureFileObjectConsistency(file);
              formData.append(opts.portalDirectoryFileFieldname, file, path);
            });
            _context4.next = 6;
            return this.executeRequest(_objectSpread(_objectSpread({}, opts), {}, {
              method: "post",
              data: formData,
              query: {
                filename: filename
              }
            }));

          case 6:
            _yield$this$executeRe2 = _context4.sent;
            data = _yield$this$executeRe2.data;
            return _context4.abrupt("return", data);

          case 9:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function (_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Sometimes file object might have had the type property defined manually with
 * Object.defineProperty and some browsers (namely firefox) can have problems
 * reading it after the file has been appended to form data. To overcome this,
 * we recreate the file object using native File constructor with a type defined
 * as a constructor argument.
 * Related issue: https://github.com/NebulousLabs/skynet-webportal/issues/290
 */


function ensureFileObjectConsistency(file) {
  return new File([file], file.name, {
    type: file.type
  });
}