"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareFormData = compareFormData;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Compares the provided FormData with the expected array of entries.
 * @param {Object} formData - opaque FormData to compare.
 * @param {array} entries - array of expected entries.
 */
function compareFormData(_x, _x2) {
  return _compareFormData.apply(this, arguments);
}

function _compareFormData() {
  _compareFormData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(formData, entries) {
    var i, _iterator, _step, _loop;

    return _regenerator["default"].wrap(function _callee$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            i = 0;
            _iterator = _createForOfIteratorHelper(formData.entries());
            _context2.prev = 2;
            _loop = /*#__PURE__*/_regenerator["default"].mark(function _loop() {
              var _step$value, fieldName, file, entry, expectedFieldName, expectedData, expectedFilename, reader;

              return _regenerator["default"].wrap(function _loop$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _step$value = (0, _slicedToArray2["default"])(_step.value, 2), fieldName = _step$value[0], file = _step$value[1];
                      entry = entries[i];
                      expectedFieldName = entry[0];
                      expectedData = entry[1];
                      expectedFilename = entry[2];
                      expect(fieldName).toEqual(expectedFieldName); // Some systems use ":" as the path delimiter.

                      expect(file.name == expectedFilename || file.name.replace(":", "/") == expectedFilename); // Read the file asynchronously.

                      reader = new FileReader();

                      reader.onload = function (e) {
                        // Check that the file contents equal expected entry.
                        expect(e.target.result).toEqual(expectedData);
                      };

                      reader.readAsText(file);

                    case 10:
                      if (!(reader.readyState != "2")) {
                        _context.next = 15;
                        break;
                      }

                      _context.next = 13;
                      return new Promise(function (r) {
                        return setTimeout(r, 10);
                      });

                    case 13:
                      _context.next = 10;
                      break;

                    case 15:
                      i++;

                    case 16:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _loop);
            });

            _iterator.s();

          case 5:
            if ((_step = _iterator.n()).done) {
              _context2.next = 9;
              break;
            }

            return _context2.delegateYield(_loop(), "t0", 7);

          case 7:
            _context2.next = 5;
            break;

          case 9:
            _context2.next = 14;
            break;

          case 11:
            _context2.prev = 11;
            _context2.t1 = _context2["catch"](2);

            _iterator.e(_context2.t1);

          case 14:
            _context2.prev = 14;

            _iterator.f();

            return _context2.finish(14);

          case 17:
            // Check that the formData contains the expected number of entries.
            expect(i).toEqual(entries.length);

          case 18:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee, null, [[2, 11, 14, 17]]);
  }));
  return _compareFormData.apply(this, arguments);
}