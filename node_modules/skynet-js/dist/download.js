"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _axios = _interopRequireDefault(require("axios"));

var _client = require("./client.js");

var _utils = require("./utils.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultDownloadOptions = _objectSpread({}, (0, _utils.defaultOptions)("/"));

var defaultDownloadHnsOptions = _objectSpread({}, (0, _utils.defaultOptions)("/hns"));

var defaultResolveHnsOptions = _objectSpread({}, (0, _utils.defaultOptions)("/hnsres"));
/**
 * Initiates a download of the content of the skylink within the browser.
 * @param {string} skylink - 46 character skylink.
 * @param {Object} [customOptions={}] - Additional settings that can optionally be set.
 * @param {string} [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 */


_client.SkynetClient.prototype.downloadFile = function (skylink) {
  var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var opts = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultDownloadOptions), this.customOptions), customOptions), {}, {
    download: true
  });

  var url = this.getSkylinkUrl(skylink, opts); // Download the url.

  window.location = url;
};
/**
 * Initiates a download of the content of the skylink at the Handshake domain.
 * @param {string} domain - Handshake domain.
 * @param {Object} [customOptions={}] - Additional settings that can optionally be set.
 * @param {string} [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 */


_client.SkynetClient.prototype.downloadFileHns = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(domain) {
    var customOptions,
        opts,
        url,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            customOptions = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            opts = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defaultDownloadHnsOptions), this.customOptions), customOptions), {}, {
              download: true
            });
            url = this.getHnsUrl(domain, opts); // Download the url.

            window.location = url;

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

_client.SkynetClient.prototype.getSkylinkUrl = function (skylink) {
  var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var opts = _objectSpread(_objectSpread(_objectSpread({}, defaultDownloadOptions), this.customOptions), customOptions);

  var query = opts.download ? {
    attachment: true
  } : {};
  var url = (0, _utils.makeUrl)(this.portalUrl, opts.endpointPath, (0, _utils.parseSkylink)(skylink));
  return (0, _utils.addUrlQuery)(url, query);
};

_client.SkynetClient.prototype.getHnsUrl = function (domain) {
  var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var opts = _objectSpread(_objectSpread(_objectSpread({}, defaultDownloadHnsOptions), this.customOptions), customOptions);

  var query = opts.download ? {
    attachment: true
  } : {};
  var url = (0, _utils.makeUrl)(this.portalUrl, opts.endpointPath, (0, _utils.trimUriPrefix)(domain, _utils.uriHandshakePrefix));
  return (0, _utils.addUrlQuery)(url, query);
};

_client.SkynetClient.prototype.getHnsresUrl = function (domain) {
  var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var opts = _objectSpread(_objectSpread(_objectSpread({}, defaultResolveHnsOptions), this.customOptions), customOptions);

  var query = opts.download ? {
    attachment: true
  } : {};
  return (0, _utils.makeUrl)(this.portalUrl, opts.endpointPath, (0, _utils.trimUriPrefix)(domain, _utils.uriHandshakeResolverPrefix));
};

_client.SkynetClient.prototype.getMetadata = /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(skylink) {
    var customOptions,
        opts,
        _args2 = arguments;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            customOptions = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
            opts = _objectSpread(_objectSpread(_objectSpread({}, defaultDownloadOptions), this.customOptions), customOptions);
            throw new Error("Unimplemented");

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Opens the content of the skylink within the browser.
 * @param {string} skylink - 46 character skylink.
 * @param {Object} [customOptions={}] - Additional settings that can optionally be set.
 * @param {string} [customOptions.endpointPath="/"] - The relative URL path of the portal endpoint to contact.
 */


_client.SkynetClient.prototype.openFile = function (skylink) {
  var customOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var opts = _objectSpread(_objectSpread(_objectSpread({}, defaultDownloadOptions), this.customOptions), customOptions);

  var url = this.getSkylinkUrl(skylink, opts);
  window.open(url, "_blank");
};
/**
 * Opens the content of the skylink from the given Handshake domain within the browser.
 * @param {string} domain - Handshake domain.
 * @param {Object} [customOptions={}] - Additional settings that can optionally be set.
 * @param {string} [customOptions.endpointPath="/hns"] - The relative URL path of the portal endpoint to contact.
 */


_client.SkynetClient.prototype.openFileHns = /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(domain) {
    var customOptions,
        opts,
        url,
        _args3 = arguments;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            customOptions = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
            opts = _objectSpread(_objectSpread(_objectSpread({}, defaultDownloadHnsOptions), this.customOptions), customOptions);
            url = this.getHnsUrl(domain, opts); // Open the url in a new tab.

            window.open(url, "_blank");

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * @param {string} domain - Handshake resolver domain.
 * @param {Object} [customOptions={}] - Additional settings that can optionally be set.
 * @param {string} [customOptions.endpointPath="/hnsres"] - The relative URL path of the portal endpoint to contact.
 */


_client.SkynetClient.prototype.resolveHns = /*#__PURE__*/function () {
  var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(domain) {
    var customOptions,
        opts,
        url,
        response,
        _args4 = arguments;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            customOptions = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
            opts = _objectSpread(_objectSpread(_objectSpread({}, defaultResolveHnsOptions), this.customOptions), customOptions);
            url = this.getHnsresUrl(domain, opts); // Get the txt record from the hnsres domain on the portal.

            _context4.next = 5;
            return this.executeRequest(_objectSpread(_objectSpread({}, opts), {}, {
              method: "get",
              url: url
            }));

          case 5:
            response = _context4.sent;
            return _context4.abrupt("return", response.data);

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}();