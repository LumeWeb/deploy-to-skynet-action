"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addUrlQuery = addUrlQuery;
exports.defaultOptions = defaultOptions;
exports.defaultPortalUrl = defaultPortalUrl;
exports.getRelativeFilePath = getRelativeFilePath;
exports.getRootDirectory = getRootDirectory;
exports.makeUrl = makeUrl;
exports.parseSkylink = parseSkylink;
exports.trimUriPrefix = trimUriPrefix;
exports.uriSkynetPrefix = exports.uriHandshakeResolverPrefix = exports.uriHandshakePrefix = exports.defaultSkynetPortalUrl = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _pathBrowserify = _interopRequireDefault(require("path-browserify"));

var _urlParse = _interopRequireDefault(require("url-parse"));

var _urlJoin = _interopRequireDefault(require("url-join"));

// import axios from "axios";
var defaultSkynetPortalUrl = "https://siasky.net";
exports.defaultSkynetPortalUrl = defaultSkynetPortalUrl;
var uriHandshakePrefix = "hns:";
exports.uriHandshakePrefix = uriHandshakePrefix;
var uriHandshakeResolverPrefix = "hnsres:";
exports.uriHandshakeResolverPrefix = uriHandshakeResolverPrefix;
var uriSkynetPrefix = "sia:";
exports.uriSkynetPrefix = uriSkynetPrefix;

function addUrlQuery(url, query) {
  var parsed = (0, _urlParse["default"])(url);
  parsed.set("query", query);
  return parsed.toString();
}

function defaultOptions(endpointPath) {
  return {
    endpointPath: endpointPath,
    APIKey: "",
    customUserAgent: ""
  };
} // TODO: This will be smarter. See
// https://github.com/NebulousLabs/skynet-docs/issues/21.


function defaultPortalUrl() {
  if (typeof window === "undefined") return "/"; // default to path root on ssr

  return window.location.origin;
}

function getFilePath(file) {
  return file.webkitRelativePath || file.path || file.name;
}

function getRelativeFilePath(file) {
  var filePath = getFilePath(file);

  var _path$parse = _pathBrowserify["default"].parse(filePath),
      root = _path$parse.root,
      dir = _path$parse.dir,
      base = _path$parse.base;

  var relative = _pathBrowserify["default"].normalize(dir).slice(root.length).split(_pathBrowserify["default"].sep).slice(1);

  return _pathBrowserify["default"].join.apply(_pathBrowserify["default"], (0, _toConsumableArray2["default"])(relative).concat([base]));
}

function getRootDirectory(file) {
  var filePath = getFilePath(file);

  var _path$parse2 = _pathBrowserify["default"].parse(filePath),
      root = _path$parse2.root,
      dir = _path$parse2.dir;

  return _pathBrowserify["default"].normalize(dir).slice(root.length).split(_pathBrowserify["default"].sep)[0];
}
/**
 * Properly joins paths together to create a URL. Takes a variable number of
 * arguments.
 * @returns {string} url - The URL.
 */


function makeUrl() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.reduce(function (acc, cur) {
    return (0, _urlJoin["default"])(acc, cur);
  });
}

var SKYLINK_MATCHER = "([a-zA-Z0-9_-]{46})";
var SKYLINK_DIRECT_REGEX = new RegExp("^".concat(SKYLINK_MATCHER, "$"));
var SKYLINK_PATHNAME_REGEX = new RegExp("^/?".concat(SKYLINK_MATCHER, "([/?].*)?$"));
var SKYLINK_REGEXP_MATCH_POSITION = 1;

function parseSkylink(skylink) {
  if (typeof skylink !== "string") throw new Error("Skylink has to be a string, ".concat((0, _typeof2["default"])(skylink), " provided")); // check for direct skylink match

  var matchDirect = skylink.match(SKYLINK_DIRECT_REGEX);
  if (matchDirect) return matchDirect[SKYLINK_REGEXP_MATCH_POSITION]; // check for skylink prefixed with sia: or sia:// and extract it
  // example: sia:XABvi7JtJbQSMAcDwnUnmp2FKDPjg8_tTTFP4BwMSxVdEg
  // example: sia://XABvi7JtJbQSMAcDwnUnmp2FKDPjg8_tTTFP4BwMSxVdEg

  skylink = trimUriPrefix(skylink, uriSkynetPrefix); // check for skylink passed in an url and extract it
  // example: https://siasky.net/XABvi7JtJbQSMAcDwnUnmp2FKDPjg8_tTTFP4BwMSxVdEg
  // pass empty object as second param to disable using location as base url when parsing in browser

  var parsed = (0, _urlParse["default"])(skylink, {});
  var matchPathname = parsed.pathname.match(SKYLINK_PATHNAME_REGEX);
  if (matchPathname) return matchPathname[SKYLINK_REGEXP_MATCH_POSITION];
  throw new Error("Could not extract skylink from '".concat(skylink, "'"));
}

function trimUriPrefix(str, prefix) {
  var longPrefix = "".concat(prefix, "//");

  if (str.startsWith(longPrefix)) {
    // longPrefix is exactly at the beginning
    return str.slice(longPrefix.length);
  }

  if (str.startsWith(prefix)) {
    // else prefix is exactly at the beginning
    return str.slice(prefix.length);
  }

  return str;
}